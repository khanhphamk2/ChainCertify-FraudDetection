{"cells":[{"cell_type":"markdown","metadata":{"id":"IX3mUuuQMlvh"},"source":["## Import library"]},{"cell_type":"markdown","metadata":{"id":"0Qo-EYUcNARx"},"source":["### Install Package"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"yqioAvi37o2X","executionInfo":{"status":"ok","timestamp":1721192369125,"user_tz":-420,"elapsed":28825,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"7534ae0c-61c8-43f3-c1bd-fcaf564055a0"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting scikeras==0.12\n","  Downloading scikeras-0.12.0-py3-none-any.whl (27 kB)\n","Requirement already satisfied: packaging>=0.21 in /usr/local/lib/python3.10/dist-packages (from scikeras==0.12) (24.1)\n","Requirement already satisfied: scikit-learn>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from scikeras==0.12) (1.2.2)\n","Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=1.0.0->scikeras==0.12) (1.25.2)\n","Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=1.0.0->scikeras==0.12) (1.11.4)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=1.0.0->scikeras==0.12) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=1.0.0->scikeras==0.12) (3.5.0)\n","Installing collected packages: scikeras\n","Successfully installed scikeras-0.12.0\n"]}],"source":["# !pip install scikeras==0.12"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"8eLaW-oqW0me","executionInfo":{"status":"ok","timestamp":1721192385146,"user_tz":-420,"elapsed":16031,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"155bf895-d724-483f-855d-53da12ca1e20"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: imbalanced-learn in /usr/local/lib/python3.10/dist-packages (0.10.1)\n","Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.10/dist-packages (from imbalanced-learn) (1.25.2)\n","Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from imbalanced-learn) (1.11.4)\n","Requirement already satisfied: scikit-learn>=1.0.2 in /usr/local/lib/python3.10/dist-packages (from imbalanced-learn) (1.2.2)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from imbalanced-learn) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from imbalanced-learn) (3.5.0)\n"]}],"source":["# !pip install imbalanced-learn"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"wK3EYL4euLXC","executionInfo":{"status":"ok","timestamp":1721192516756,"user_tz":-420,"elapsed":131619,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"856c7047-a06b-4106-ab92-9d31ffb0ad72"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting pytorch-tabnet\n","  Downloading pytorch_tabnet-4.1.0-py3-none-any.whl (44 kB)\n","\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/44.5 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.5/44.5 kB\u001b[0m \u001b[31m1.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from pytorch-tabnet) (1.25.2)\n","Requirement already satisfied: scikit_learn>0.21 in /usr/local/lib/python3.10/dist-packages (from pytorch-tabnet) (1.2.2)\n","Requirement already satisfied: scipy>1.4 in /usr/local/lib/python3.10/dist-packages (from pytorch-tabnet) (1.11.4)\n","Requirement already satisfied: torch>=1.3 in /usr/local/lib/python3.10/dist-packages (from pytorch-tabnet) (2.3.0+cu121)\n","Requirement already satisfied: tqdm>=4.36 in /usr/local/lib/python3.10/dist-packages (from pytorch-tabnet) (4.66.4)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit_learn>0.21->pytorch-tabnet) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit_learn>0.21->pytorch-tabnet) (3.5.0)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch>=1.3->pytorch-tabnet) (3.15.4)\n","Requirement already satisfied: typing-extensions>=4.8.0 in /usr/local/lib/python3.10/dist-packages (from torch>=1.3->pytorch-tabnet) (4.12.2)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch>=1.3->pytorch-tabnet) (1.13.0)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch>=1.3->pytorch-tabnet) (3.3)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch>=1.3->pytorch-tabnet) (3.1.4)\n","Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch>=1.3->pytorch-tabnet) (2023.6.0)\n","Collecting nvidia-cuda-nvrtc-cu12==12.1.105 (from torch>=1.3->pytorch-tabnet)\n","  Using cached nvidia_cuda_nvrtc_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (23.7 MB)\n","Collecting nvidia-cuda-runtime-cu12==12.1.105 (from torch>=1.3->pytorch-tabnet)\n","  Using cached nvidia_cuda_runtime_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (823 kB)\n","Collecting nvidia-cuda-cupti-cu12==12.1.105 (from torch>=1.3->pytorch-tabnet)\n","  Using cached nvidia_cuda_cupti_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (14.1 MB)\n","Collecting nvidia-cudnn-cu12==8.9.2.26 (from torch>=1.3->pytorch-tabnet)\n","  Using cached nvidia_cudnn_cu12-8.9.2.26-py3-none-manylinux1_x86_64.whl (731.7 MB)\n","Collecting nvidia-cublas-cu12==12.1.3.1 (from torch>=1.3->pytorch-tabnet)\n","  Using cached nvidia_cublas_cu12-12.1.3.1-py3-none-manylinux1_x86_64.whl (410.6 MB)\n","Collecting nvidia-cufft-cu12==11.0.2.54 (from torch>=1.3->pytorch-tabnet)\n","  Using cached nvidia_cufft_cu12-11.0.2.54-py3-none-manylinux1_x86_64.whl (121.6 MB)\n","Collecting nvidia-curand-cu12==10.3.2.106 (from torch>=1.3->pytorch-tabnet)\n","  Using cached nvidia_curand_cu12-10.3.2.106-py3-none-manylinux1_x86_64.whl (56.5 MB)\n","Collecting nvidia-cusolver-cu12==11.4.5.107 (from torch>=1.3->pytorch-tabnet)\n","  Using cached nvidia_cusolver_cu12-11.4.5.107-py3-none-manylinux1_x86_64.whl (124.2 MB)\n","Collecting nvidia-cusparse-cu12==12.1.0.106 (from torch>=1.3->pytorch-tabnet)\n","  Using cached nvidia_cusparse_cu12-12.1.0.106-py3-none-manylinux1_x86_64.whl (196.0 MB)\n","Collecting nvidia-nccl-cu12==2.20.5 (from torch>=1.3->pytorch-tabnet)\n","  Using cached nvidia_nccl_cu12-2.20.5-py3-none-manylinux2014_x86_64.whl (176.2 MB)\n","Collecting nvidia-nvtx-cu12==12.1.105 (from torch>=1.3->pytorch-tabnet)\n","  Using cached nvidia_nvtx_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (99 kB)\n","Requirement already satisfied: triton==2.3.0 in /usr/local/lib/python3.10/dist-packages (from torch>=1.3->pytorch-tabnet) (2.3.0)\n","Collecting nvidia-nvjitlink-cu12 (from nvidia-cusolver-cu12==11.4.5.107->torch>=1.3->pytorch-tabnet)\n","  Downloading nvidia_nvjitlink_cu12-12.5.82-py3-none-manylinux2014_x86_64.whl (21.3 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.3/21.3 MB\u001b[0m \u001b[31m34.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch>=1.3->pytorch-tabnet) (2.1.5)\n","Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy->torch>=1.3->pytorch-tabnet) (1.3.0)\n","Installing collected packages: nvidia-nvtx-cu12, nvidia-nvjitlink-cu12, nvidia-nccl-cu12, nvidia-curand-cu12, nvidia-cufft-cu12, nvidia-cuda-runtime-cu12, nvidia-cuda-nvrtc-cu12, nvidia-cuda-cupti-cu12, nvidia-cublas-cu12, nvidia-cusparse-cu12, nvidia-cudnn-cu12, nvidia-cusolver-cu12, pytorch-tabnet\n","Successfully installed nvidia-cublas-cu12-12.1.3.1 nvidia-cuda-cupti-cu12-12.1.105 nvidia-cuda-nvrtc-cu12-12.1.105 nvidia-cuda-runtime-cu12-12.1.105 nvidia-cudnn-cu12-8.9.2.26 nvidia-cufft-cu12-11.0.2.54 nvidia-curand-cu12-10.3.2.106 nvidia-cusolver-cu12-11.4.5.107 nvidia-cusparse-cu12-12.1.0.106 nvidia-nccl-cu12-2.20.5 nvidia-nvjitlink-cu12-12.5.82 nvidia-nvtx-cu12-12.1.105 pytorch-tabnet-4.1.0\n"]}],"source":["# !pip install pytorch-tabnet"]},{"cell_type":"markdown","metadata":{"id":"qXtR0JnMNEAx"},"source":["### Import Package"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"lEHqimDJzG5c","executionInfo":{"status":"ok","timestamp":1721192555687,"user_tz":-420,"elapsed":22984,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"}}},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","from imblearn.over_sampling import SMOTE\n","from sklearn.preprocessing import MinMaxScaler, LabelEncoder, PolynomialFeatures\n","from sklearn.model_selection import KFold, RepeatedKFold, GridSearchCV, cross_val_score\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import confusion_matrix, classification_report, r2_score as r2\n","from sklearn.metrics import f1_score, roc_auc_score, recall_score, accuracy_score, precision_score\n","from sklearn.linear_model import LinearRegression, LogisticRegression, Ridge\n","from sklearn.pipeline import Pipeline, make_pipeline\n","from sklearn.ensemble import RandomForestClassifier, StackingClassifier, StackingRegressor\n","from sklearn.svm import SVC\n","from xgboost import XGBClassifier\n","from collections import Counter\n","from scikeras.wrappers import KerasClassifier, KerasRegressor\n","import torch\n","import keras\n","from keras.models import Sequential\n","from keras.layers import Dense\n","from keras import layers\n","from keras.constraints import max_norm as MaxNorm\n","import lightgbm as lgb\n","from sklearn import svm\n","from pytorch_tabnet.tab_model import TabNetClassifier\n","import tensorflow as tf\n","from sklearn.neural_network import MLPClassifier\n","from tqdm import tqdm\n","import time\n","import datetime\n","import pytz\n","\n","desired_timezone = pytz.timezone('Asia/Ho_Chi_Minh')\n","%matplotlib inline\n","import matplotlib\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","import warnings\n","warnings.filterwarnings(\"ignore\")\n","\n","import random\n","random.seed(42)"]},{"cell_type":"markdown","metadata":{"id":"QqdbC3WWMuNO"},"source":["## Define Variables"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"o-5sA-HzMxyi","executionInfo":{"status":"ok","timestamp":1721192555687,"user_tz":-420,"elapsed":7,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"}}},"outputs":[],"source":["matplotlib.rcParams['figure.figsize'] = (11.0, 8.0)"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"C2vcgUsash4s","executionInfo":{"status":"ok","timestamp":1721192555688,"user_tz":-420,"elapsed":6,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"}}},"outputs":[],"source":["cols = ['avg_sent_time',\n"," 'sent',\n"," 'time_difference_mins',\n"," 'avg_received_time',\n"," 'total_txs',\n"," 'avg_gas_fee',\n"," 'unique_sent_addresses',\n"," 'received',\n"," 'unique_received_addresses', 'total_eth_received']"]},{"cell_type":"markdown","metadata":{"id":"eTItKRe4MrQK"},"source":["## Load Data"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"6v6YXMeizK_z","executionInfo":{"status":"ok","timestamp":1721192555688,"user_tz":-420,"elapsed":5,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"}}},"outputs":[],"source":["data_path = \"/content/drive/MyDrive/Colab Notebooks/Dataset/address_data_combined.csv\""]},{"cell_type":"code","execution_count":8,"metadata":{"id":"uLprEMYIsom_","executionInfo":{"status":"ok","timestamp":1721192557542,"user_tz":-420,"elapsed":1859,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"}}},"outputs":[],"source":["df = pd.read_csv(data_path, usecols = cols + ['address', 'flag'])"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":226},"executionInfo":{"elapsed":447,"status":"ok","timestamp":1721192559890,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"},"user_tz":-420},"id":"e4t7vwNvRJh0","outputId":"a45aaf5e-e229-4088-b70f-f1b5ac5ef87e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                      address  avg_sent_time  \\\n","0  0x6c96769a08ddefa92e06de0a32089272c57f79b2      32.464093   \n","1  0x73f858acd93866902f59a8b53ab5f8ae1824c74b      32.079906   \n","2  0x8dab36ee57328e700380d1fd6588bc3de5fe8ec3      32.210966   \n","3  0xc9c736bab11d24528c3543b14e610e5c6a30d921      57.475760   \n","4  0xd74e2d68510786311f05a898ea6fa7a36727ee55      32.476325   \n","\n","   avg_received_time  time_difference_mins  sent  received  \\\n","0                0.0             173455.65  5343         0   \n","1                0.0             173456.05  5407         0   \n","2                0.0             173456.05  5385         0   \n","3                0.0             417906.25  7271         0   \n","4                0.0             173456.05  5341         0   \n","\n","   unique_received_addresses  unique_sent_addresses  avg_gas_fee  total_txs  \\\n","0                          0                      3     0.006758       5343   \n","1                          0                      3     0.006526       5407   \n","2                          0                      3     0.006141       5385   \n","3                          0                     10     0.032492       7271   \n","4                          0                      3     0.006419       5341   \n","\n","   total_eth_received  flag  \n","0                 0.0     1  \n","1                 0.0     1  \n","2                 0.0     1  \n","3                 0.0     1  \n","4                 0.0     1  "],"text/html":["\n","  <div id=\"df-93d620aa-5e0c-4194-b211-fdef4e0ae085\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>address</th>\n","      <th>avg_sent_time</th>\n","      <th>avg_received_time</th>\n","      <th>time_difference_mins</th>\n","      <th>sent</th>\n","      <th>received</th>\n","      <th>unique_received_addresses</th>\n","      <th>unique_sent_addresses</th>\n","      <th>avg_gas_fee</th>\n","      <th>total_txs</th>\n","      <th>total_eth_received</th>\n","      <th>flag</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0x6c96769a08ddefa92e06de0a32089272c57f79b2</td>\n","      <td>32.464093</td>\n","      <td>0.0</td>\n","      <td>173455.65</td>\n","      <td>5343</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0.006758</td>\n","      <td>5343</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0x73f858acd93866902f59a8b53ab5f8ae1824c74b</td>\n","      <td>32.079906</td>\n","      <td>0.0</td>\n","      <td>173456.05</td>\n","      <td>5407</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0.006526</td>\n","      <td>5407</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0x8dab36ee57328e700380d1fd6588bc3de5fe8ec3</td>\n","      <td>32.210966</td>\n","      <td>0.0</td>\n","      <td>173456.05</td>\n","      <td>5385</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0.006141</td>\n","      <td>5385</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0xc9c736bab11d24528c3543b14e610e5c6a30d921</td>\n","      <td>57.475760</td>\n","      <td>0.0</td>\n","      <td>417906.25</td>\n","      <td>7271</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>10</td>\n","      <td>0.032492</td>\n","      <td>7271</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0xd74e2d68510786311f05a898ea6fa7a36727ee55</td>\n","      <td>32.476325</td>\n","      <td>0.0</td>\n","      <td>173456.05</td>\n","      <td>5341</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0.006419</td>\n","      <td>5341</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-93d620aa-5e0c-4194-b211-fdef4e0ae085')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-93d620aa-5e0c-4194-b211-fdef4e0ae085 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-93d620aa-5e0c-4194-b211-fdef4e0ae085');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d5f02da1-7f1c-4dca-a8dc-b71ccaf443cd\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d5f02da1-7f1c-4dca-a8dc-b71ccaf443cd')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d5f02da1-7f1c-4dca-a8dc-b71ccaf443cd button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":9}],"source":["df.head()"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":409,"status":"ok","timestamp":1721192564693,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"},"user_tz":-420},"id":"lqUDY5ViSyMP","outputId":"6a91078f-e387-4479-9687-312ad91f9f0b"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 104788 entries, 0 to 104787\n","Data columns (total 12 columns):\n"," #   Column                     Non-Null Count   Dtype  \n","---  ------                     --------------   -----  \n"," 0   address                    104788 non-null  object \n"," 1   avg_sent_time              104788 non-null  float64\n"," 2   avg_received_time          104788 non-null  float64\n"," 3   time_difference_mins       104788 non-null  float64\n"," 4   sent                       104788 non-null  int64  \n"," 5   received                   104788 non-null  int64  \n"," 6   unique_received_addresses  104788 non-null  int64  \n"," 7   unique_sent_addresses      104788 non-null  int64  \n"," 8   avg_gas_fee                104788 non-null  float64\n"," 9   total_txs                  104788 non-null  int64  \n"," 10  total_eth_received         104788 non-null  float64\n"," 11  flag                       104788 non-null  int64  \n","dtypes: float64(5), int64(6), object(1)\n","memory usage: 9.6+ MB\n"]}],"source":["df.info()"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"vbFJ-gQQzN0j","executionInfo":{"status":"ok","timestamp":1721192567870,"user_tz":-420,"elapsed":411,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"}}},"outputs":[],"source":["X_sample = df.drop(columns=['address', 'flag'])\n","y_sample = df['flag']"]},{"cell_type":"code","source":["# X_sample = X_sample.round(3)"],"metadata":{"id":"_LkWeqZE8UFv"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4I9Cpq0MRR3j"},"source":["## Resampling"]},{"cell_type":"code","execution_count":35,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":551,"status":"ok","timestamp":1721192758263,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"},"user_tz":-420},"id":"88B9VYpRRRUM","outputId":"c330cf30-f093-4282-aade-c8d4f089b7b3"},"outputs":[{"output_type":"stream","name":"stdout","text":["Counter({1: 94145, 0: 10643})\n"]}],"source":["counter = Counter(y_sample)\n","print(counter)"]},{"cell_type":"markdown","metadata":{"id":"_VDwD__xM4Lq"},"source":["## Training and Testing"]},{"cell_type":"markdown","metadata":{"id":"6xdykVoJNLrH"},"source":["### Split train and test data"]},{"cell_type":"code","execution_count":36,"metadata":{"id":"7GJtgzNaOLEA","executionInfo":{"status":"ok","timestamp":1721192758821,"user_tz":-420,"elapsed":560,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"}}},"outputs":[],"source":["X_train, X_test, y_train, y_test = train_test_split(X_sample, y_sample, test_size=0.3, random_state=42, stratify=y_sample)"]},{"cell_type":"code","source":["oversample = SMOTE(random_state=42)\n","X_train_full, y_train_full = oversample.fit_resample(X_train, y_train)"],"metadata":{"id":"XNWntdz4D6g9","executionInfo":{"status":"ok","timestamp":1721192758822,"user_tz":-420,"elapsed":7,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"}}},"execution_count":37,"outputs":[]},{"cell_type":"code","execution_count":38,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1721192758822,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"},"user_tz":-420},"id":"pHa_aX1BSh59","outputId":"430c3e05-d65b-4a1c-d84b-07f658e55eb2"},"outputs":[{"output_type":"stream","name":"stdout","text":["Counter({1: 65901, 0: 65901})\n"]}],"source":["counter = Counter(y_train_full)\n","print(counter)"]},{"cell_type":"code","source":["counter = Counter(y_test)\n","print(counter)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"533sBb2IEwb6","executionInfo":{"status":"ok","timestamp":1721192758822,"user_tz":-420,"elapsed":5,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"}},"outputId":"5f524daa-94f2-48fe-a8c2-e533bc987172"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["Counter({1: 28244, 0: 3193})\n"]}]},{"cell_type":"code","execution_count":40,"metadata":{"id":"A7j50OM3Orna","executionInfo":{"status":"ok","timestamp":1721192758822,"user_tz":-420,"elapsed":4,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"}}},"outputs":[],"source":["# Initialize MinMaxScaler\n","scaler = MinMaxScaler()"]},{"cell_type":"code","execution_count":41,"metadata":{"id":"5l4VNRGhzPyt","executionInfo":{"status":"ok","timestamp":1721192761865,"user_tz":-420,"elapsed":3046,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"}}},"outputs":[],"source":["# Log transformation for skewed data and scaling\n","for c in cols:\n","    # Log transformation\n","    X_train_full[c] = X_train_full[c].apply(lambda x: np.log(x) if x > 0 else 0)\n","    X_test[c] = X_test[c].apply(lambda x: np.log(x) if x > 0 else 0)\n","\n","# Scaling using only the training data to avoid data leakage\n","X_train_full_scaled = scaler.fit_transform(X_train_full)\n","X_test_scaled = scaler.transform(X_test)"]},{"cell_type":"code","source":["X_train_full_scaled = np.round(X_train_full_scaled, 3)\n","X_test_scaled = np.round(X_test_scaled, 3)"],"metadata":{"id":"7t5tE1Nn8NSE","executionInfo":{"status":"ok","timestamp":1721192761865,"user_tz":-420,"elapsed":13,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"}}},"execution_count":42,"outputs":[]},{"cell_type":"code","execution_count":43,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1721192761865,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"},"user_tz":-420},"id":"lBLR8GEgOPbI","outputId":"ed206f98-a3fc-4923-b967-eec20e36dc83"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":43}],"source":["np.isnan(X_train_full_scaled).any()"]},{"cell_type":"markdown","metadata":{"id":"r_nXcY75OfzM"},"source":["\n","Optionally print the shape and head of the training data\n"]},{"cell_type":"code","execution_count":44,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1721192761866,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"},"user_tz":-420},"id":"1t9OqI0lOk8T","outputId":"14528c70-22ab-4e7a-d57d-65b92832dff0"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(131802, 10)"]},"metadata":{},"execution_count":44}],"source":["X_train_full_scaled.shape"]},{"cell_type":"code","execution_count":45,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1721192761866,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"},"user_tz":-420},"id":"leNoKPcZOlji","outputId":"8f11e995-07ea-46da-812b-e52bb7cce17b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   avg_sent_time  avg_received_time  time_difference_mins      sent  received  \\\n","0       8.822880           0.000000             12.080976  3.258097  0.000000   \n","1       8.620184           0.000000             11.185133  2.564949  0.000000   \n","2       0.000000           0.000000              0.000000  0.000000  0.000000   \n","3       5.084195          -0.198451              5.782378  0.693147  0.693147   \n","4      10.658039           0.000000             12.855264  2.197225  0.000000   \n","\n","   unique_received_addresses  unique_sent_addresses  avg_gas_fee  total_txs  \\\n","0                   0.000000               2.890372    -5.675464   3.258097   \n","1                   0.000000               1.791759    -5.828988   2.564949   \n","2                   0.000000               0.000000    -7.454436   0.000000   \n","3                   0.693147               0.693147    -7.575022   1.386294   \n","4                   0.000000               1.945910    -6.887775   2.197225   \n","\n","   total_eth_received  \n","0            0.000000  \n","1            0.000000  \n","2            9.210340  \n","3            4.615121  \n","4            0.000000  "],"text/html":["\n","  <div id=\"df-44a132bd-31dc-4e20-8ce8-2232a1649c66\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>avg_sent_time</th>\n","      <th>avg_received_time</th>\n","      <th>time_difference_mins</th>\n","      <th>sent</th>\n","      <th>received</th>\n","      <th>unique_received_addresses</th>\n","      <th>unique_sent_addresses</th>\n","      <th>avg_gas_fee</th>\n","      <th>total_txs</th>\n","      <th>total_eth_received</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>8.822880</td>\n","      <td>0.000000</td>\n","      <td>12.080976</td>\n","      <td>3.258097</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>2.890372</td>\n","      <td>-5.675464</td>\n","      <td>3.258097</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>8.620184</td>\n","      <td>0.000000</td>\n","      <td>11.185133</td>\n","      <td>2.564949</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1.791759</td>\n","      <td>-5.828988</td>\n","      <td>2.564949</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>-7.454436</td>\n","      <td>0.000000</td>\n","      <td>9.210340</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>5.084195</td>\n","      <td>-0.198451</td>\n","      <td>5.782378</td>\n","      <td>0.693147</td>\n","      <td>0.693147</td>\n","      <td>0.693147</td>\n","      <td>0.693147</td>\n","      <td>-7.575022</td>\n","      <td>1.386294</td>\n","      <td>4.615121</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>10.658039</td>\n","      <td>0.000000</td>\n","      <td>12.855264</td>\n","      <td>2.197225</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1.945910</td>\n","      <td>-6.887775</td>\n","      <td>2.197225</td>\n","      <td>0.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-44a132bd-31dc-4e20-8ce8-2232a1649c66')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-44a132bd-31dc-4e20-8ce8-2232a1649c66 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-44a132bd-31dc-4e20-8ce8-2232a1649c66');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ce363fcc-dba8-4227-bf90-d433e2e4dcf3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ce363fcc-dba8-4227-bf90-d433e2e4dcf3')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ce363fcc-dba8-4227-bf90-d433e2e4dcf3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_train_full"}},"metadata":{},"execution_count":45}],"source":["X_train_full.head()"]},{"cell_type":"markdown","metadata":{"id":"xv5DsxtcNQmm"},"source":["### Config model"]},{"cell_type":"markdown","metadata":{"id":"pUSnmK0LS8In"},"source":["Optimal Parameters for each model from hyperparameter tuning"]},{"cell_type":"code","execution_count":46,"metadata":{"id":"QSl2HQrkzRn3","executionInfo":{"status":"ok","timestamp":1721192761866,"user_tz":-420,"elapsed":8,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"}}},"outputs":[],"source":["tabnet_params = {'gamma': 1.0,\n","                 'lambda_sparse': 0,\n","                 'momentum': 0.4,\n","                 'n_steps': 8,\n","                 'optimizer_params': {'lr': 0.025},\n","                 'verbose': 0}\n","\n","xgb_params = {'learning_rate': 0.05,\n","              'max_depth': 8,\n","              'n_estimators': 1000}\n","\n","\n","mlp_params = {'input_dim': X_train_full.shape[1],\n","              'H': 60,\n","              'activation': 'relu',\n","              'dropout_probability': 0.2,\n","              'num_epochs': 75,\n","              'num_layers': 10}\n","\n","svm_params = {'C': 1000,\n","              'gamma': 1}\n","\n","rf_params = {'max_depth': 20,\n","               'min_samples_leaf': 5,\n","               'n_jobs': -1}\n","\n","lightgbm_params = {\"bagging_fraction\": 0.95,\n","                   \"bagging_freq\": 1,\n","                   \"feature_fraction\": 0.95,\n","                   \"learning_rate\": 0.2,\n","                   \"max_bin\": 300,\n","                   \"max_depth\": 6,\n","                   \"min_gain_to_split\": 0,\n","                   \"num_leaves\": 20}\n"]},{"cell_type":"markdown","metadata":{"id":"2NpDZMfEOv1i"},"source":["### Functions"]},{"cell_type":"code","execution_count":47,"metadata":{"id":"5iqWinLzNe_F","executionInfo":{"status":"ok","timestamp":1721192761866,"user_tz":-420,"elapsed":8,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"}}},"outputs":[],"source":["def compile_mlp(input_dim, H, num_epochs, num_layers, activation, dropout_probability):\n","    model_n = Sequential()\n","    model_n.add(layers.Dense(H, input_shape=(input_dim, ), activation= activation))\n","\n","    for _ in range(num_layers - 1):\n","        model_n.add(layers.Dense(H, activation= activation, kernel_constraint=MaxNorm(3)))\n","        model_n.add(layers.Dropout(dropout_probability))\n","\n","    model_n.add(layers.Dense(1, activation='sigmoid'))\n","    model_n.compile(loss='binary_crossentropy', optimizer='adam', metrics=[tf.keras.metrics.AUC(from_logits=True)])\n","    return model_n"]},{"cell_type":"code","execution_count":48,"metadata":{"id":"2Qygf8W_zTBp","executionInfo":{"status":"ok","timestamp":1721192761866,"user_tz":-420,"elapsed":8,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"}}},"outputs":[],"source":["def evaluate_model(model, X, y):\n","    cv = RepeatedKFold(n_splits=5, n_repeats=1, random_state=42)\n","    scores = cross_val_score(model, X, y, scoring='f1', cv=cv, n_jobs=-1)\n","    return scores"]},{"cell_type":"code","execution_count":49,"metadata":{"id":"1tHZAqo3O3dy","executionInfo":{"status":"ok","timestamp":1721192761866,"user_tz":-420,"elapsed":7,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"}}},"outputs":[],"source":["def get_all_models():\n","    models = dict()\n","    models['tabnet'] = TabNetClassifier(**tabnet_params)\n","    models['svm'] = svm.SVC(**svm_params)\n","    models['xgboost'] = XGBClassifier(**xgb_params)\n","    models['mlp'] = KerasClassifier(model = compile_mlp, **mlp_params)\n","    models['lightGBM'] = lgb.LGBMClassifier(**lightgbm_params)\n","    models['rf'] = RandomForestClassifier(**rf_params)\n","    return models"]},{"cell_type":"markdown","metadata":{"id":"H8NSjxizNs9V"},"source":["### Model performance for comparison"]},{"cell_type":"code","execution_count":50,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":884},"id":"7TmZblFHzZOZ","executionInfo":{"status":"ok","timestamp":1721200440362,"user_tz":-420,"elapsed":7678503,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"}},"outputId":"a5876e07-3f3d-449b-ed62-d10be21b1d42"},"outputs":[{"output_type":"stream","name":"stdout","text":["Prcessing tabnet...\n",">tabnet 0.977 (0.005)\n","Prcessing svm...\n",">svm 0.976 (0.001)\n","Prcessing xgboost...\n",">xgboost 0.994 (0.001)\n","Prcessing mlp...\n",">mlp 0.935 (0.006)\n","Prcessing lightGBM...\n",">lightGBM 0.991 (0.001)\n","Prcessing rf...\n",">rf 0.991 (0.001)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1100x800 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["models = get_all_models()\n","\n","results, names = [], []\n","for name, model in models.items():\n","    print(f\"Prcessing {name}...\")\n","    scores = evaluate_model(model, X_train_full_scaled, y_train_full)\n","    results.append(scores)\n","    names.append(name)\n","    print('>%s %.3f (%.3f)' % (name, np.mean(scores), np.std(scores)))\n","# plot model performance for comparison\n","plt.boxplot(results, labels=names, showmeans=True)\n","\n","plt.show()"]},{"cell_type":"code","execution_count":51,"metadata":{"id":"iY0cixBORZsL","executionInfo":{"status":"ok","timestamp":1721200440362,"user_tz":-420,"elapsed":5,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"}}},"outputs":[],"source":["results_df = pd.DataFrame(results, columns=['Score_1', 'Score_2', 'Score_3', 'Score_4', 'Score_5'])  # Assuming there are 5 scores\n","\n","results_df['Model'] = names\n","\n","current = datetime.datetime.now()\n","current_time_with_timezone = current.astimezone(desired_timezone)\n","formatted_date = current_time_with_timezone.strftime(\"%Y-%m-%d_%H-%M-%S\")\n","results_df.to_csv(f\"/content/drive/MyDrive/Colab Notebooks/Dataset/TrainingModel/{formatted_date}_evaluate_model.csv\", index=False)"]},{"cell_type":"code","execution_count":52,"metadata":{"id":"5LsFp3O4Cfvi","colab":{"base_uri":"https://localhost:8080/","height":607},"executionInfo":{"status":"ok","timestamp":1721200441081,"user_tz":-420,"elapsed":723,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"}},"outputId":"80e93e3b-3159-4f7c-8c56-a63353160ba4"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Plot model performance\n","plt.figure(figsize=(10, 6))\n","plt.boxplot(results, labels=names, showmeans=True)\n","plt.title('Model Performance Comparison')\n","plt.xlabel('Model')\n","plt.ylabel('F1 Score')\n","plt.xticks(rotation=45)\n","plt.grid(axis='y', linestyle='--', alpha=0.7)\n","plt.tight_layout()\n","\n","current = datetime.datetime.now()\n","current_time_with_timezone = current.astimezone(desired_timezone)\n","formatted_date = current_time_with_timezone.strftime(\"%Y-%m-%d_%H-%M-%S\")\n","plt.savefig(f\"/content/drive/MyDrive/Colab Notebooks/Dataset/TrainingModel/{formatted_date}_boxplot_evaluate_model.png\")\n","\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"gED1l172Paqg"},"source":["### Getting predictions from all models to evaluate performance on test set"]},{"cell_type":"code","execution_count":53,"metadata":{"id":"eK5V4HikQVKW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1721202815243,"user_tz":-420,"elapsed":2374167,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"}},"outputId":"0f1555d6-076f-42c9-d1d2-8e64882f6f52"},"outputs":[{"output_type":"stream","name":"stdout","text":["Prcessing tabnet...\n","Prcessing svm...\n","Prcessing xgboost...\n","Prcessing mlp...\n","4119/4119 [==============================] - 26s 6ms/step - loss: 0.2473 - auc: 0.9611\n","983/983 [==============================] - 2s 2ms/step\n","Prcessing lightGBM...\n","[LightGBM] [Warning] feature_fraction is set=0.95, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.95\n","[LightGBM] [Warning] min_gain_to_split is set=0, min_split_gain=0.0 will be ignored. Current value: min_gain_to_split=0\n","[LightGBM] [Warning] bagging_fraction is set=0.95, subsample=1.0 will be ignored. Current value: bagging_fraction=0.95\n","[LightGBM] [Warning] bagging_freq is set=1, subsample_freq=0 will be ignored. Current value: bagging_freq=1\n","[LightGBM] [Warning] feature_fraction is set=0.95, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.95\n","[LightGBM] [Warning] min_gain_to_split is set=0, min_split_gain=0.0 will be ignored. Current value: min_gain_to_split=0\n","[LightGBM] [Warning] bagging_fraction is set=0.95, subsample=1.0 will be ignored. Current value: bagging_fraction=0.95\n","[LightGBM] [Warning] bagging_freq is set=1, subsample_freq=0 will be ignored. Current value: bagging_freq=1\n","[LightGBM] [Info] Number of positive: 65901, number of negative: 65901\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.004495 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 2977\n","[LightGBM] [Info] Number of data points in the train set: 131802, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n","[LightGBM] [Warning] feature_fraction is set=0.95, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.95\n","[LightGBM] [Warning] min_gain_to_split is set=0, min_split_gain=0.0 will be ignored. Current value: min_gain_to_split=0\n","[LightGBM] [Warning] bagging_fraction is set=0.95, subsample=1.0 will be ignored. Current value: bagging_fraction=0.95\n","[LightGBM] [Warning] bagging_freq is set=1, subsample_freq=0 will be ignored. Current value: bagging_freq=1\n","Prcessing rf...\n"]}],"source":["predictions, list_models, training_times, prediction_times = list(), list(), list(), list()\n","for name, model in get_all_models().items():\n","    print(f\"Prcessing {name}...\")\n","    current_time = time.time()\n","    model.fit(X_train_full_scaled, y_train_full)\n","    training_times.append(time.time() - current_time)\n","\n","    current_time = time.time()\n","    predictions.append(model.predict(X_test_scaled))\n","    prediction_times.append(time.time() - current_time)\n","\n","    list_models.append(name)"]},{"cell_type":"code","execution_count":54,"metadata":{"id":"LSTdnY6XQpVI","executionInfo":{"status":"ok","timestamp":1721202816697,"user_tz":-420,"elapsed":1464,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"}}},"outputs":[],"source":["sample = pd.DataFrame(predictions, index=list_models).T"]},{"cell_type":"code","execution_count":55,"metadata":{"id":"auPdg5luRzoO","executionInfo":{"status":"ok","timestamp":1721202816698,"user_tz":-420,"elapsed":4,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"}}},"outputs":[],"source":["current = datetime.datetime.now()\n","current_time_with_timezone = current.astimezone(desired_timezone)\n","formatted_date = current_time_with_timezone.strftime(\"%Y-%m-%d_%H-%M-%S\")\n","\n","sample.to_csv(f\"/content/drive/MyDrive/Colab Notebooks/Dataset/TrainingModel/{formatted_date}_predictions_models.csv\", index=False)"]},{"cell_type":"markdown","metadata":{"id":"kRofIkVEPebz"},"source":["### Result Model"]},{"cell_type":"code","execution_count":56,"metadata":{"id":"_4ZwvJkqzcbJ","executionInfo":{"status":"ok","timestamp":1721202816698,"user_tz":-420,"elapsed":3,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"}}},"outputs":[],"source":["results_df = pd.DataFrame()\n","\n","results_df['Model'] = list_models\n","results_df['Time taken'] = training_times\n","results_df['Prediction Time'] = prediction_times\n","results_df['Optimal Parameters'] = [tabnet_params,\n","                                    svm_params,\n","                                    xgb_params,\n","                                    mlp_params,\n","                                    lightgbm_params,\n","                                    rf_params]\n","\n","metrics_dict = {'Accuracy': accuracy_score,\n","                'Precision': precision_score,\n","                'Recall': recall_score,\n","                'F1': f1_score,\n","                'ROC-AUC': roc_auc_score}"]},{"cell_type":"code","execution_count":57,"metadata":{"id":"ae0Z8MXSP5bn","executionInfo":{"status":"ok","timestamp":1721202817332,"user_tz":-420,"elapsed":637,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"}}},"outputs":[],"source":["for metric, func in metrics_dict.items():\n","    storage = []\n","    for prediction in predictions:\n","        storage.append(func(y_test, prediction))\n","    results_df[metric] = storage"]},{"cell_type":"code","source":["# results_df[['Time taken', 'Prediction Time']]=results_df[['Time taken', 'Prediction Time']].round(2)\n","results_df[['Accuracy', 'Precision', 'Recall', 'F1', 'ROC-AUC']]=results_df[['Accuracy', 'Precision', 'Recall', 'F1', 'ROC-AUC']].round(4)"],"metadata":{"id":"fKIUQqCf8dYQ","executionInfo":{"status":"ok","timestamp":1721202817333,"user_tz":-420,"elapsed":6,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"}}},"execution_count":58,"outputs":[]},{"cell_type":"code","execution_count":59,"metadata":{"id":"gL3yX7ZmP6F_","colab":{"base_uri":"https://localhost:8080/","height":237},"executionInfo":{"status":"ok","timestamp":1721202817333,"user_tz":-420,"elapsed":5,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"}},"outputId":"772e4981-1d61-4328-a2a6-f977b987836d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Model   Time taken  Prediction Time  \\\n","3       mlp    44.676970         2.523102   \n","1       svm   759.737949        23.602897   \n","0    tabnet  1504.477523         1.486661   \n","4  lightGBM     1.625550         0.188814   \n","5        rf    18.446839         0.548337   \n","2   xgboost    15.843892         1.036233   \n","\n","                                  Optimal Parameters  Accuracy  Precision  \\\n","3  {'input_dim': 10, 'H': 60, 'activation': 'relu...    0.9103     0.9974   \n","1                            {'C': 1000, 'gamma': 1}    0.9684     0.9966   \n","0  {'gamma': 1.0, 'lambda_sparse': 0, 'momentum':...    0.9747     0.9904   \n","4  {'bagging_fraction': 0.95, 'bagging_freq': 1, ...    0.9907     0.9974   \n","5  {'max_depth': 20, 'min_samples_leaf': 5, 'n_jo...    0.9910     0.9970   \n","2  {'learning_rate': 0.05, 'max_depth': 8, 'n_est...    0.9916     0.9970   \n","\n","   Recall      F1  ROC-AUC  \n","3  0.9025  0.9476   0.9409  \n","1  0.9682  0.9822   0.9694  \n","0  0.9813  0.9858   0.9485  \n","4  0.9922  0.9948   0.9848  \n","5  0.9930  0.9950   0.9833  \n","2  0.9936  0.9953   0.9836  "],"text/html":["\n","  <div id=\"df-4476b7b6-fb84-43f5-a088-8bfb7316818e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>Time taken</th>\n","      <th>Prediction Time</th>\n","      <th>Optimal Parameters</th>\n","      <th>Accuracy</th>\n","      <th>Precision</th>\n","      <th>Recall</th>\n","      <th>F1</th>\n","      <th>ROC-AUC</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>3</th>\n","      <td>mlp</td>\n","      <td>44.676970</td>\n","      <td>2.523102</td>\n","      <td>{'input_dim': 10, 'H': 60, 'activation': 'relu...</td>\n","      <td>0.9103</td>\n","      <td>0.9974</td>\n","      <td>0.9025</td>\n","      <td>0.9476</td>\n","      <td>0.9409</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>svm</td>\n","      <td>759.737949</td>\n","      <td>23.602897</td>\n","      <td>{'C': 1000, 'gamma': 1}</td>\n","      <td>0.9684</td>\n","      <td>0.9966</td>\n","      <td>0.9682</td>\n","      <td>0.9822</td>\n","      <td>0.9694</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>tabnet</td>\n","      <td>1504.477523</td>\n","      <td>1.486661</td>\n","      <td>{'gamma': 1.0, 'lambda_sparse': 0, 'momentum':...</td>\n","      <td>0.9747</td>\n","      <td>0.9904</td>\n","      <td>0.9813</td>\n","      <td>0.9858</td>\n","      <td>0.9485</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>lightGBM</td>\n","      <td>1.625550</td>\n","      <td>0.188814</td>\n","      <td>{'bagging_fraction': 0.95, 'bagging_freq': 1, ...</td>\n","      <td>0.9907</td>\n","      <td>0.9974</td>\n","      <td>0.9922</td>\n","      <td>0.9948</td>\n","      <td>0.9848</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>rf</td>\n","      <td>18.446839</td>\n","      <td>0.548337</td>\n","      <td>{'max_depth': 20, 'min_samples_leaf': 5, 'n_jo...</td>\n","      <td>0.9910</td>\n","      <td>0.9970</td>\n","      <td>0.9930</td>\n","      <td>0.9950</td>\n","      <td>0.9833</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>xgboost</td>\n","      <td>15.843892</td>\n","      <td>1.036233</td>\n","      <td>{'learning_rate': 0.05, 'max_depth': 8, 'n_est...</td>\n","      <td>0.9916</td>\n","      <td>0.9970</td>\n","      <td>0.9936</td>\n","      <td>0.9953</td>\n","      <td>0.9836</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4476b7b6-fb84-43f5-a088-8bfb7316818e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4476b7b6-fb84-43f5-a088-8bfb7316818e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4476b7b6-fb84-43f5-a088-8bfb7316818e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e166e5e8-5b97-4b1c-81e4-27107bfe58e6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e166e5e8-5b97-4b1c-81e4-27107bfe58e6')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e166e5e8-5b97-4b1c-81e4-27107bfe58e6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"results_df\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"mlp\",\n          \"svm\",\n          \"xgboost\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Time taken\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 620.788160228699,\n        \"min\": 1.6255502700805664,\n        \"max\": 1504.4775230884552,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          44.67696976661682,\n          759.7379491329193,\n          15.843892097473145\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Prediction Time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.199562928731847,\n        \"min\": 0.18881440162658691,\n        \"max\": 23.60289716720581,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          2.523102045059204,\n          23.60289716720581,\n          1.0362327098846436\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Optimal Parameters\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03136019238886566,\n        \"min\": 0.9103,\n        \"max\": 0.9916,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.9103,\n          0.9684,\n          0.9916\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Precision\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.002743477112473647,\n        \"min\": 0.9904,\n        \"max\": 0.9974,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.9966,\n          0.997,\n          0.9974\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0353455513466688,\n        \"min\": 0.9025,\n        \"max\": 0.9936,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.9025,\n          0.9682,\n          0.9936\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.018411708231448814,\n        \"min\": 0.9476,\n        \"max\": 0.9953,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.9476,\n          0.9822,\n          0.9953\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ROC-AUC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.019366302348839518,\n        \"min\": 0.9409,\n        \"max\": 0.9848,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.9409,\n          0.9694,\n          0.9836\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":59}],"source":["results_df.sort_values(['F1', 'ROC-AUC'], ascending = [True, True])"]},{"cell_type":"code","execution_count":60,"metadata":{"id":"rfv0mOUuQNhI","executionInfo":{"status":"ok","timestamp":1721202817333,"user_tz":-420,"elapsed":4,"user":{"displayName":"Khánh Phạm Đức","userId":"09281055300326635918"}}},"outputs":[],"source":["current = datetime.datetime.now()\n","current_time_with_timezone = current.astimezone(desired_timezone)\n","formatted_date = current_time_with_timezone.strftime(\"%Y-%m-%d_%H-%M-%S\")\n","\n","results_df.to_csv(f'/content/drive/MyDrive/Colab Notebooks/Dataset/TrainingModel/{formatted_date}_train_models.csv', index=False)"]}],"metadata":{"colab":{"collapsed_sections":["qXtR0JnMNEAx","QqdbC3WWMuNO","xv5DsxtcNQmm","2NpDZMfEOv1i"],"provenance":[],"mount_file_id":"1dbDJK_If8SH_dJdQmulrlV9qhj88cYnq","authorship_tag":"ABX9TyPBZWe+9+pnx6y55gD/J9Cd"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}